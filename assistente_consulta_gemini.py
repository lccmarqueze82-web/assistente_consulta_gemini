import streamlit as st
from google import genai
from google.genai.errors import APIError

# --- CONFIGURA√á√ÉO INICIAL E CONSTANTES ---
st.set_page_config(page_title="Assistente de Consulta Gemini", layout="wide")

st.title("ü©∫ Assistente de Consulta Gemini")

GEMINI_MODEL = "gemini-2.5-flash"

# --- PROMPTS COMO CONSTANTES (LIMPOS E COM ESTRUTURA REFOR√áADA) ---

# Prompt para a Etapa 2 (PEC1) - ESTRUTURA√á√ÉO PARA TEXTO SIMPLES DO PEC (ATUALIZADO)
# CORRE√á√ÉO: Adicionado o prefixo 'r' para criar uma 'raw string' (evita SyntaxError: \N)
# CORRE√á√ÉO L√ìGICA: Substitu√≠do o delimitador '\N' por ' // ' e for√ßada a sa√≠da em uma √∫nica linha.
SYSTEM_ROLE_PEC1 = r"""
VOC√ä √â O ASSISTENTE DE DOCUMENTA√á√ÉO CL√çNICA PEC1. SUA √öNICA FUN√á√ÉO √â GERAR O REGISTRO CL√çNICO FINAL. **SIGA AS REGRAS DE FORMATA√á√ÉO E L√ìGICA ESTRITAMENTE**.

**PROIBIDO:** INTRODU√á√ïES, COMENT√ÅRIOS, NUMERA√á√ïES DE ITENS, PERGUNTAS, OU QUALQUER TEXTO FORA DA ESTRUTURA OBRIGAT√ìRIA.

### **1. FORMATO DE SA√çDA OBRIGAT√ìRIO (TEXTO SIMPLES)**

GERE O REGISTRO **INTEIRAMENTE EM CAIXA ALTA** E NESTA ORDEM. **OMITA** A SE√á√ÉO `AVALIA√á√ÉO MULTIDIMENSIONAL` SE N√ÉO FOR APLIC√ÅVEL.

HMA: HPP: MUC: EX FISICO: AVALIA√á√ÉO MULTIDIMENSIONAL: EXAMES: HD: CONDUTA:

VERIFICA√á√ÉO BEERS / STOPP-START:

GARANTIA DE EST√âTICA: O REGISTRO DEVE SER GERADO INTEGRALMENTE COMO **TEXTO SIMPLES** E **CONTIDO EM UMA √öNICA LINHA**, SEPARANDO AS GRANDES SE√á√ïES APENAS POR ESPA√áOS. AS SE√á√ïES HMA, HD E CONDUTA DEVEM TER SEUS ITENS SEPARADOS EXCLUSIVAMENTE PELO CARACTERE **" // "** (ESPA√áO DUAS BARRAS ESPA√áO) NO LUGAR DA QUEBRA DE LINHA. **REMOVER TODOS OS CARACTERES MARKDOWN (***, **, #, ETC)**.

### **2. REGRAS DE EXCE√á√ÉO E MARCADORES TEMPORAIS**

* **RENOVA√á√ÉO N√ÉO PRESENCIAL (##01/##02):**
    * **##01:** HMA: "RENOVA√á√ÉO N√ÉO PRESENCIAL DE RECEITA." // "PACIENTE N√ÉO PRESENTE." | EX FISICO: "IMPOSS√çVEL, PACIENTE N√ÉO PRESENTE NO MOMENTO." | CONDUTA: "ORIENTADA A COMPARECER √Ä CONSULTA AGENDADA." // "C√ìDIGO DE √âTICA M√âDICA ‚Äì ARTIGO 37."
    * **##02 (FORA DE √ÅREA):** IGUAL AO ##01, MAS HMA: "RENOVA√á√ÉO N√ÉO PRESENCIAL DE RECEITA; IDENTIFICA√á√ÉO DE PACIENTE FORA DE √ÅREA." // "PACIENTE N√ÉO PRESENTE." | CONDUTA: "ATUALIZAR ENDERE√áO DO PACIENTE NO CADASTRO." // "ORIENTADA A COMPARECER √Ä CONSULTA AGENDADA." // "C√ìDIGO DE √âTICA M√âDICA ‚Äì ARTIGO 37."
* **RENOVA√á√ÉO N√ÉO PRESENCIAL CONSECUTIVA (REGRA FINAL):**
    * **SE** O ATENDIMENTO ATUAL FOR **##01 OU ##02 E** O ATENDIMENTO ANTERIOR TAMB√âM FOI **##01 OU ##02**, **ENT√ÉO SUBSTITUA** `HD:` E `CONDUTA:` POR:
        * HD: `SOLICITA√á√ÉO DE RENOVA√á√ÉO N√ÉO PRESENCIAL DE RECEITA MUC (SEGUNDO EPIS√ìDIO).`
        * CONDUTA: `SUGIRO AGENDAMENTO DE CONSULTA PRESENCIAL. // C√ìDIGO DE √âTICA M√âDICA ‚Äì ARTIGO 37: √â VEDADO PRESCREVER SEM AVALIA√á√ÉO DIRETA DO PACIENTE, EXCETO EM SITUA√á√ïES DE URG√äNCIA OU EM CASO DE CONTINUIDADE DE TRATAMENTO J√Å INICIADO.`
    * **N√ÉO** APLIQUE CONDUTAS AUTOM√ÅTICAS (‚â•65 ANOS, DM, RASTREIOS) NESTE CASO.

### **3. REGRAS POR SE√á√ÉO**

| SE√á√ÉO | REGRA DE CONTE√öDO E FORMATA√á√ÉO |
| :--- | :--- |
| **HMA** | **ORDEM FIXA (ITENS SEPARADOS POR ` // `):** 1. MOTIVO; 2. FORA DE √ÅREA (SE APLIC√ÅVEL); 3. IDADE E SEXO; 4. TEMPO DESDE √öLTIMO ATENDIMENTO; 5. QUEIXAS/SINTOMAS. **PROIBIDO:** INCLUIR GATILHOS GERI√ÅTRICOS. |
| **HPP** | LINHA √öNICA. DOEN√áAS SEPARADAS POR `;`. USAR `DIAGN√ìSTICO (CID-10)` SEMPRE. SE N√ÉO HOUVER: `NEGA COMORBIDADES.` |
| **MUC** | LINHA √öNICA. MEDICAMENTOS SEPARADOS POR `;`. BENZODIAZEP√çNICOS EM **CAIXA ALTA ENTRE PAR√äNTESES SIMPLES**. SE N√ÉO HOUVER: `SEM MEDICAMENTOS DE USO CONT√çNUO.` |
| **EX FISICO** | PRESENCIAL: `BEG, EUPNEICO, LOTE, FC E PA AFERIDAS POR ENFERMAGEM; [ACHADOS].` N√ÉO PRESENCIAL: `IMPOSS√çVEL, PACIENTE N√ÉO PRESENTE NO MOMENTO.` |
| **AVALIA√á√ÉO MULTIDIMENSIONAL** | **REQUISITOS:** APENAS SE (IDADE ‚â•65 ANOS **E** GATILHO GERI√ÅTRICO PRESENTE). USE O MODELO PADR√ÉO. **ALTERE E DESTAQUE** O ACHADO APENAS EM **CAIXA ALTA ENTRE PARENTESES SIMPLES** (EX: (FRAQUEZA EM MEMBROS INFERIORES)). |
| **EXAMES** | EXAMES ALTERADOS EM **CAIXA ALTA ENTRE PARENTESES SIMPLES**. DATA (MM/AA). MANTER ALTERADOS DE QUALQUER √âPOCA E NORMAIS <1 ANO. CALCULAR CKD-EPI (2021) E CLASSIFICAR DRC SE CREATININA+IDADE+SEXO DISPON√çVEIS. SE N√ÉO HOUVER: `SEM EXAMES DISPON√çVEIS.` |
| **HD** | UM DIAGN√ìSTICO (NOVO OU DESCOMPENSADO) POR LINHA (SER√Å SEPARADO POR ` // `). DIAGN√ìSTICO INCERTO: `*`. |
| **CONDUTA** | UMA A√á√ÉO POR LINHA (SER√Å SEPARADO POR ` // `). **SEMPRE INCLUIR:** `MANTER MEDICAMENTOS DE USO CONT√çNUO.`; `MANTER SOLICITA√á√ïES ANTERIORES EM ANDAMENTO.`. **INCLUIR** CONDUTAS AUTOM√ÅTICAS (‚â•65 ANOS, DM, RASTREIOS - VIDE PROTOCOLO). **JUSTIFICAR TODOS OS `*`** NO FINAL DESTA SE√á√ÉO. |

### **4. ALERTA FARMAC√äUTICO (BEERS / STOPP-START)**

* **APLICAR** ESTA SE√á√ÉO APENAS PARA PACIENTES ‚â•65 ANOS COM MUC.
* USE OS MODELOS DE ALERTA **INICIANDO COM "ALERTA: "** PARA BEERS/STOPP OU **"OMISS√ÉO TERAP√äUTICA: "** PARA START.
"""

# Prompt para a Etapa 3 (Sugest√µes)
SYSTEM_ROLE_SUGESTOES = "Voc√™ √© um assistente m√©dico de IA. Analise cuidadosamente o texto processado, que j√° est√° formatado com o Prompt PEC1, e gere sugest√µes de diagn√≥sticos diferenciais e condutas m√©dicas apropriadas. Seja claro, conciso e use linguagem m√©dica profissional."

# Prompt para a Etapa 4 (Chat Livre)
SYSTEM_ROLE_CHAT = "Voc√™ √© um assistente de chat geral e prestativo. Responda √† pergunta do usu√°rio. Mantenha o contexto de ser um assistente, mas responda de forma livre."


# --- INICIALIZA√á√ÉO DO CLIENTE GEMINI ---
try:
    client = genai.Client(api_key=st.secrets["GOOGLE_API_KEY"])
except KeyError:
    st.error("ERRO: Chave 'GOOGLE_API_KEY' n√£o encontrada nos segredos do Streamlit. Por favor, adicione sua chave de API do Gemini em .streamlit/secrets.toml.")
    st.stop()
except Exception as e:
    st.error(f"ERRO ao inicializar o cliente Gemini: {e}")
    st.stop()


# --- FUN√á√ÉO DE CHAMADA DO GEMINI ---
def gemini_reply(system_instruction, text_input):
    """Fun√ß√£o para chamar o modelo Gemini com instru√ß√µes de sistema."""
    
    config = genai.types.GenerateContentConfig(
        system_instruction=system_instruction
    )
    
    try:
        response = client.models.generate_content(
            model=GEMINI_MODEL,
            contents=text_input,
            config=config
        )
        return response.text.strip()
    except APIError as e:
        st.error(f"Erro da API do Gemini: {e}")
        return f"ERRO NA API: {e}"
    except Exception as e:
        st.error(f"Erro inesperado: {e}")
        return f"ERRO INESPERADO: {e}"


# --- INICIALIZA√á√ÉO DO ESTADO DE SESS√ÉO ---
for key in ["caixa1", "caixa2", "caixa3", "caixa4", "chat_response", "show_manual_copy"]:
    if key not in st.session_state:
        st.session_state[key] = False if key == "show_manual_copy" else ""


# --- FUN√á√ïES DE CALLBACK ---

def clear_fields():
    """Callback para a fun√ß√£o LIMPAR: Reseta todos os campos de estado da sess√£o."""
    for key in ["caixa1","caixa2","caixa3","caixa4", "chat_response", "show_manual_copy"]:
        st.session_state[key] = ""

def apply_pec1():
    """Callback para a Etapa 2: Aplica Prompt PEC1 e atualiza Caixa 2."""
    if not st.session_state.get("caixa1"):
        st.warning("A Caixa 1 est√° vazia. Insira a informa√ß√£o crua primeiro.")
        return

    st.session_state["show_manual_copy"] = False 

    with st.spinner("Aplicando Prompt PEC1..."):
        st.session_state["caixa2"] = gemini_reply(
            SYSTEM_ROLE_PEC1,
            st.session_state["caixa1"]
        )
        st.success("‚úÖ Prompt aplicado!")

def generate_suggestions():
    """Callback para a Etapa 3: Gerar Sugest√µes e atualizar Caixa 3."""
    if not st.session_state.get("caixa2"):
        st.warning("A Caixa 2 est√° vazia. Aplique o Prompt PEC1 (Etapa 2) primeiro.")
        return

    st.session_state["show_manual_copy"] = False

    with st.spinner("Analisando diagn√≥stico..."):
        st.session_state["caixa3"] = gemini_reply(
            SYSTEM_ROLE_SUGESTOES,
            st.session_state["caixa2"]
        )
        st.success("‚úÖ Sugest√µes geradas!")

def send_chat():
    """Callback para a Etapa 4: Chat Livre e exibe resposta no Markdown."""
    if not st.session_state.get("caixa4"):
        st.warning("A Caixa 4 est√° vazia. Digite sua pergunta.")
        return

    st.session_state["show_manual_copy"] = False

    with st.spinner("Respondendo..."):
        resposta = gemini_reply(SYSTEM_ROLE_CHAT, st.session_state["caixa4"])
        st.session_state["chat_response"] = resposta

def copy_caixa2_content():
    """Inverte a flag para exibir/ocultar o bloco de c√≥pia (st.code)."""
    st.session_state["show_manual_copy"] = not st.session_state.get("show_manual_copy", False)


# --- MARCADOR E EXPANDER DAS REGRAS ---

st.markdown("""
O assistente trabalha em 4 etapas:
1Ô∏è‚É£ **Caixa 1** ‚Äì Informa√ß√£o crua
2Ô∏è‚É£ **Caixa 2** ‚Äì Aplica Prompt PEC1 atualizado
3Ô∏è‚É£ **Caixa 3** ‚Äì Sugest√µes e condutas
4Ô∏è‚É£ **Caixa 4** ‚Äì Chat livre com Gemini
---
""")

# Expander para as regras (Onde o SYSTEM_ROLE_PEC1 completo est√°)
with st.expander("üìù Ver Regras Completas do Prompt PEC1"):
    # Exibir o prompt como um bloco de c√≥digo simples, que respeita as quebras de linha
    st.code(SYSTEM_ROLE_PEC1, language="markdown")


# --- LAYOUT DAS CAIXAS DE TEXTO ---
col1, col2, col3 = st.columns(3)

with col1:
    st.text_area("CAIXA 1 - Informa√ß√£o Crua", height=250, key="caixa1",
                 help="Insira aqui o texto de entrada (anota√ß√µes, dados brutos, etc.)")

with col2:
    # A Caixa 2 principal √© um text_area, que √© edit√°vel e a primeira visualiza√ß√£o.
    st.text_area("CAIXA 2 - Prompt PEC1 Atualizado", height=250, key="caixa2",
                 help="Sa√≠da formatada do Gemini conforme as regras PEC1.")

with col3:
    st.text_area("CAIXA 3 - Sugest√µes e Discuss√£o", height=250, key="caixa3",
                 help="Sugest√µes de diagn√≥sticos, condutas e discuss√£o geradas pelo Gemini.")

st.markdown("---") # Separador visual

# --- LAYOUT DOS BOT√ïES DE CONTROLE ---
colA, colB, colC, colD = st.columns([1, 1, 2, 2])

caixa1_has_content = bool(st.session_state.get("caixa1", "").strip())
caixa2_has_content = bool(st.session_state.get("caixa2", "").strip())
caixa4_has_content = bool(st.session_state.get("caixa4", "").strip())

with colA:
    st.button("üßπ LIMPAR TUDO", on_click=clear_fields)

with colB:
    # Bot√£o COPIAR
    label_copy = "üìã OCULTAR C√ìPIA" if st.session_state.get("show_manual_copy") else "üìã COPIAR CAIXA 2"
    st.button(label_copy, on_click=copy_caixa2_content, disabled=not caixa2_has_content,
              help="Alterna a visualiza√ß√£o de um bloco de c√≥digo com bot√£o de c√≥pia nativo.")

with colC:
    # Bot√£o Etapa 2
    st.button("‚öôÔ∏è 1. Aplicar Prompt PEC1 (Caixa 2)", on_click=apply_pec1,
              disabled=not caixa1_has_content)

with colD:
    # Bot√£o Etapa 3
    st.button("üí¨ 2. Gerar Sugest√µes (Caixa 3)", on_click=generate_suggestions,
              disabled=not caixa2_has_content)


# --- EXIBI√á√ÉO DO BLOCO DE C√ìPIA (Com formata√ß√£o preservada e bot√£o vis√≠vel) ---
if st.session_state.get("show_manual_copy"):
    if caixa2_has_content:
        st.markdown("### üìã Bloco de C√≥pia - Formato Final (Caixa 2)")
        st.info("üí° **Dica:** O texto abaixo est√° no formato **Texto Simples** exigido pelo PEC. Use o bot√£o **'Copy' (dois quadrados)** para garantir que a formata√ß√£o de linha √∫nica (com delimitadores ` // `) seja copiada corretamente para o seu sistema.")
        
        # O USO DE language="markdown" AQUI √â S√ì PARA O STREAMLIT VISUALIZAR MELHOR
        st.code(st.session_state["caixa2"], language="markdown") 
        
    else:
        st.warning("A Caixa 2 est√° vazia. N√£o h√° conte√∫do para copiar.")
        st.session_state["show_manual_copy"] = False # Limpa a flag


# --- CHAT LIVRE (CAIXA 4) E BOT√ÉO DE ENVIO ---
st.markdown("---")
st.subheader("4. Chat Livre com Gemini")

# Usando colunas para a Caixa 4 e o bot√£o de envio
colE, colF = st.columns([4, 1])

with colE:
    st.text_input("Pergunta para o Gemini", key="caixa4", label_visibility="collapsed",
                  placeholder="Digite sua pergunta livre para o Gemini...",
                  help="Digite sua pergunta livre para o Gemini (ex: 'Qual a dose m√°xima de metformina?')")

with colF:
    # Alinhamento vertical do bot√£o
    st.markdown("<style>div.stButton > button {width: 100%; height: 38px; margin-top: 24px;}</style>", unsafe_allow_html=True)
    st.button("üí≠ Enviar Chat", on_click=send_chat, disabled=not caixa4_has_content)

# --- EXIBI√á√ÉO DO RESULTADO DO CHAT (Etapa 4) ---
if st.session_state.get("chat_response"):
    st.markdown("---")
    st.markdown(f"**Gemini Responde:** {st.session_state['chat_response']}")
    st.markdown("---")
