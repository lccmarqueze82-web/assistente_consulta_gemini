import streamlit as st
from google import genai 
from google.genai.errors import APIError

st.set_page_config(page_title="Assistente de Consulta Gemini", layout="wide")

st.title("ü©∫ Assistente de Consulta Gemini")

# Inicializa o cliente Gemini
try:
    client = genai.Client(api_key=st.secrets["GOOGLE_API_KEY"])
except KeyError:
    st.error("ERRO: Chave 'GOOGLE_API_KEY' n√£o encontrada nos segredos do Streamlit. Por favor, adicione sua chave de API do Gemini em .streamlit/secrets.toml.")
    st.stop()
except Exception as e:
    st.error(f"ERRO ao inicializar o cliente Gemini: {e}")
    st.stop()

# Usaremos o modelo 'gemini-2.5-flash' ou outro modelo de chat/texto adequado.
GEMINI_MODEL = "gemini-2.5-flash" 

st.markdown("""
O assistente trabalha em 4 etapas:
1Ô∏è‚É£ **Caixa 1** ‚Äì Informa√ß√£o crua¬†¬†
2Ô∏è‚É£ **Caixa 2** ‚Äì Aplica Prompt PEC1 atualizado¬†¬†
3Ô∏è‚É£ **Caixa 3** ‚Äì Sugest√µes e condutas¬†¬†
4Ô∏è‚É£ **Caixa 4** ‚Äì Chat livre com Gemini¬†¬†
---
""")

# --- Fun√ß√£o de Chamada do Gemini ---
def gemini_reply(system_instruction, text_input):
    """Fun√ß√£o para chamar o modelo Gemini com instru√ß√µes de sistema."""
    
    # O SDK do Gemini usa 'system_instruction' no par√¢metro 'config'
    config = genai.types.GenerateContentConfig(
        system_instruction=system_instruction
    )
    
    try:
        response = client.models.generate_content(
            model=GEMINI_MODEL,
            contents=text_input, # O conte√∫do a ser processado pelo modelo
            config=config 
        )
        return response.text.strip()
    except APIError as e:
        st.error(f"Erro da API do Gemini: {e}")
        return f"ERRO NA API: {e}"
    except Exception as e:
        st.error(f"Erro inesperado: {e}")
        return f"ERRO INESPERADO: {e}"

# --- Fun√ß√µes de Callback ---

def clear_fields():
    """Callback para a fun√ß√£o LIMPAR: Reseta todos os campos de estado da sess√£o."""
    for key in ["caixa1","caixa2","caixa3","caixa4", "chat_response", "show_manual_copy"]:
        st.session_state[key] = ""

def apply_pec1():
    """Callback para a Etapa 2: Aplica Prompt PEC1 e atualiza Caixa 2."""
    if not st.session_state.get("caixa1"):
        st.warning("A Caixa 1 est√° vazia. Insira a informa√ß√£o crua primeiro.")
        return

    # Limpa a flag de c√≥pia para n√£o mostrar a caixa de c√≥digo antiga
    st.session_state["show_manual_copy"] = False

    with st.spinner("Aplicando Prompt PEC1..."):
        # O prompt do sistema foi atualizado para conter todas as regras complexas do PEC1.
        system_role_pec1 = """
Voc√™ √© o assistente de documenta√ß√£o cl√≠nica PEC1. Sua √∫nica fun√ß√£o √© gerar o registro cl√≠nico final. **Siga as regras de formata√ß√£o e l√≥gica estritamente**.

**PROIBIDO:** Introdu√ß√µes, coment√°rios, numera√ß√µes de itens, perguntas, ou qualquer texto fora da estrutura obrigat√≥ria.

### **1. FORMATO DE SA√çDA OBRIGAT√ìRIO**

Gere o registro **INTEIRAMENTE EM CAIXA ALTA** e nesta ordem. **Omita** a se√ß√£o `AVALIA√á√ÉO MULTIDIMENSIONAL` se n√£o for aplic√°vel.

```
HMA:
HPP:
MUC:
EX FISICO:
AVALIA√á√ÉO MULTIDIMENSIONAL:
EXAMES:
HD:
CONDUTA:

VERIFICA√á√ÉO BEERS / STOPP-START:
```

### **2. REGRAS DE EXCE√á√ÉO E MARCADORES TEMPORAIS**

¬† * **RENOVA√á√ÉO N√ÉO PRESENCIAL (##01/##02):**
¬† ¬† ¬† * **##01:** HMA: "RENOVA√á√ÉO N√ÉO PRESENCIAL DE RECEITA." | EX FISICO: "IMPOSS√çVEL, PACIENTE N√ÉO PRESENTE NO MOMENTO." | CONDUTA: Incluir "ORIENTADA A COMPARECER √Ä CONSULTA AGENDADA." e "C√ìDIGO DE √âTICA M√âDICA ‚Äì ARTIGO 37."
¬† ¬† ¬† * **##02 (Fora de √Årea):** Igual ao ##01, mas HMA: "RENOVA√á√ÉO N√ÉO PRESENCIAL DE RECEITA; IDENTIFICA√á√ÉO DE PACIENTE FORA DE √ÅREA." | CONDUTA: Adicionar "ATUALIZAR ENDERE√áO DO PACIENTE NO CADASTRO."
¬† * **RENOVA√á√ÉO N√ÉO PRESENCIAL CONSECUTIVA (REGRA FINAL):**
¬† ¬† ¬† * **SE** o atendimento atual for **##01 ou ##02 E** o atendimento anterior tamb√©m foi **##01 ou ##02**, **ENT√ÉO SUBSTITUA** `HD:` e `CONDUTA:` por:
¬† ¬† ¬† ¬† ¬† * HD: `SOLICITA√á√ÉO DE RENOVA√á√ÉO N√ÉO PRESENCIAL DE RECEITA MUC (SEGUNDO EPIS√ìDIO).`
¬† ¬† ¬† ¬† ¬† * CONDUTA: `SUGIRO AGENDAMENTO DE CONSULTA PRESENCIAL. C√ìDIGO DE √âTICA M√âDICA ‚Äì ARTIGO 37: √â VEDADO PRESCREVER SEM AVALIA√á√ÉO DIRETA DO PACIENTE, EXCETO EM SITUA√á√ïES DE URG√äNCIA OU EM CASO DE CONTINUIDADE DE TRATAMENTO J√Å INICIADO.`
¬† ¬† ¬† * **N√ÉO** aplique condutas autom√°ticas (‚â•65 anos, DM, rastreios) neste caso.

### **3. REGRAS POR SE√á√ÉO**

| Se√ß√£o | Regra de Conte√∫do e Formata√ß√£o |
| :--- | :--- |
| **HMA** | **Ordem Fixa (uma linha por item):** 1. Motivo; 2. Fora de √Årea (se aplic√°vel); 3. Idade e Sexo; 4. Tempo desde √∫ltimo atendimento; 5. Queixas/Sintomas. **PROIBIDO:** Incluir gatilhos geri√°tricos. |
| **HPP** | Linha √∫nica. Doen√ßas separadas por `;`. Usar `DIAGN√ìSTICO (CID-10)` sempre. Se n√£o houver: `NEGA COMORBIDADES.` |
| **MUC** | Linha √∫nica. Medicamentos separados por `;`. Benzodiazep√≠nicos em ***NEGRIFO E IT√ÅLICO***. Se n√£o houver: `SEM MEDICAMENTOS DE USO CONT√çNUO.` |
| **EX FISICO** | Presencial: `BEG, EUPNEICO, LOTE, FC E PA AFERIDAS POR ENFERMAGEM; [ACHADOS].` N√£o Presencial: `IMPOSS√çVEL, PACIENTE N√ÉO PRESENTE NO MOMENTO.` |
| **AVALIA√á√ÉO MULTIDIMENSIONAL** | **REQUISITOS:** Apenas se (Idade ‚â•65 anos **E** Gatilho Geri√°trico presente). Use o modelo padr√£o. **ALTERE e DESTAQUE** o achado apenas em ***NEGRIFO E IT√ÅLICO***. |
| **EXAMES** | Exames alterados em ***NEGRIFO E IT√ÅLICO***. Data (MM/AA). Manter alterados de qualquer √©poca e normais <1 ano. **CALCULAR CKD-EPI (2021)** e classificar DRC se Creatinina+Idade+Sexo dispon√≠veis. Se n√£o houver: `SEM EXAMES DISPON√çVEIS.` |
| **HD** | Um diagn√≥stico (novo ou descompensado) por linha. Diagn√≥stico incerto: `*`. |
| **CONDUTA** | Uma a√ß√£o por linha. **SEMPRE INCLUIR:** `MANTER MEDICAMENTOS DE USO CONT√çNUO.`; `MANTER SOLICITA√á√ïES ANTERIORES EM ANDAMENTO.`. **INCLUIR** condutas autom√°ticas (‚â•65 anos, DM, Rastreios - vide Protocolo). **JUSTIFICAR TODOS OS `*`** no final desta se√ß√£o. |

### **4. ALERTA FARMAC√äUTICO (BEERS / STOPP-START)**

¬† * **APLICAR** esta se√ß√£o apenas para pacientes ‚â•65 anos com MUC.
¬† * Use os modelos de alerta `‚ö† [F√ÅRMACO]...` para BEERS/STOPP ou `‚ö† OMISS√ÉO TERAP√äUTICA...` para START.
"""
        
        st.session_state["caixa2"] = gemini_reply(
            system_role_pec1,
            st.session_state["caixa1"]
        )
        st.success("‚úÖ Prompt aplicado!")

def generate_suggestions():
    """Callback para a Etapa 3: Gerar Sugest√µes e atualizar Caixa 3."""
    if not st.session_state.get("caixa2"):
        st.warning("A Caixa 2 est√° vazia. Aplique o Prompt PEC1 (Etapa 2) primeiro.")
        return

    # Limpa a flag de c√≥pia
    st.session_state["show_manual_copy"] = False

    with st.spinner("Analisando diagn√≥stico..."):
        system_role_sugestoes = "Voc√™ √© um assistente m√©dico de IA. Analise cuidadosamente o texto processado, que j√° est√° formatado com o Prompt PEC1, e gere sugest√µes de diagn√≥sticos diferenciais e condutas m√©dicas apropriadas. Seja claro, conciso e use linguagem m√©dica profissional."
        
        st.session_state["caixa3"] = gemini_reply(
            system_role_sugestoes,
            st.session_state["caixa2"]
        )
        st.success("‚úÖ Sugest√µes geradas!")

def send_chat():
    """Callback para a Etapa 4: Chat Livre e exibe resposta no Markdown."""
    if not st.session_state.get("caixa4"):
        st.warning("A Caixa 4 est√° vazia. Digite sua pergunta.")
        return

    # Limpa a flag de c√≥pia
    st.session_state["show_manual_copy"] = False

    with st.spinner("Respondendo..."):
        system_role_chat = "Voc√™ √© um assistente de chat geral e prestativo. Responda √† pergunta do usu√°rio. Mantenha o contexto de ser um assistente, mas responda de forma livre."
        
        resposta = gemini_reply(system_role_chat, st.session_state["caixa4"])
        st.session_state["chat_response"] = resposta
        
# Novo callback para o bot√£o COPIAR
def copy_caixa2_content():
    """
    Define a flag para exibir/ocultar o conte√∫do da Caixa 2 para c√≥pia manual.
    Nota: A sele√ß√£o autom√°tica de texto em um st.text_area por meio de um bot√£o n√£o √© 
    suportada nativamente pelo Streamlit devido a restri√ß√µes do navegador/DOM.
    Por isso, usamos o componente st.code, que tem um bot√£o de c√≥pia embutido.
    """
    # Apenas inverte o estado para exibir/ocultar a caixa de c√≥digo
    st.session_state["show_manual_copy"] = not st.session_state.get("show_manual_copy", False)
        
# --- Inicializa o estado de exibi√ß√£o (IMPORTANTE) ---
if "caixa1" not in st.session_state: st.session_state["caixa1"] = ""
if "caixa2" not in st.session_state: st.session_state["caixa2"] = ""
if "caixa3" not in st.session_state: st.session_state["caixa3"] = ""
if "caixa4" not in st.session_state: st.session_state["caixa4"] = ""
if "chat_response" not in st.session_state: st.session_state["chat_response"] = ""
if "show_manual_copy" not in st.session_state: st.session_state["show_manual_copy"] = False


# --- Layout das Caixas de Texto (Todas Edit√°veis) ---
col1, col2, col3 = st.columns(3)

with col1:
    st.text_area("CAIXA 1 - Informa√ß√£o Crua", height=250, key="caixa1")

with col2:
    st.text_area("CAIXA 2 - Prompt PEC1 Atualizado", height=250, key="caixa2")

with col3:
    st.text_area("CAIXA 3 - Sugest√µes e Discuss√£o", height=250, key="caixa3")

st.text_input("CAIXA 4 - Chat com Gemini", key="caixa4")

# Determina se a Caixa 2 tem conte√∫do
caixa2_content = st.session_state.get("caixa2", "").strip()
caixa2_has_content = bool(caixa2_content)

# --- Layout dos Bot√µes ---
colA, colB, colC = st.columns([1, 1, 2])

with colA:
    st.button("üßπ LIMPAR", on_click=clear_fields) 

with colB:
    # Bot√£o COPIAR usa o novo callback e √© desabilitado se a Caixa 2 estiver vazia
    label_copy = "üìã OCULTAR C√ìPIA" if st.session_state.get("show_manual_copy") else "üìã COPIAR CAIXA 2"
    st.button(label_copy, on_click=copy_caixa2_content, disabled=not caixa2_has_content) 

with colC:
    st.button("‚öôÔ∏è Aplicar Prompt PEC1", on_click=apply_pec1)

# --- Exibi√ß√£o do Bloco de C√≥pia Manual (Novo elemento) ---
if st.session_state.get("show_manual_copy") and caixa2_has_content:
    st.markdown("### üìã Conte√∫do da Caixa 2 para C√≥pia Manual")
    st.warning("‚ö†Ô∏è **ATEN√á√ÉO:** O Python/Streamlit n√£o pode selecionar o texto diretamente. **Use o bot√£o 'Copy' (dois quadrados) no canto superior direito deste bloco** para copiar o texto com um clique.")
    st.code(caixa2_content, language="markdown") # Usa 'markdown' para melhor visualiza√ß√£o de texto
elif st.session_state.get("show_manual_copy") and not caixa2_has_content:
    # Se o bot√£o foi clicado, mas o conte√∫do foi removido manualmente, ou houve race condition
    st.warning("A Caixa 2 est√° vazia. N√£o h√° conte√∫do para copiar.")
    st.session_state["show_manual_copy"] = False # Limpa a flag
    
# --- Bot√£o Etapa 3 (Tamb√©m usando Callback) ---
if caixa2_has_content:
    st.button("üí¨ Gerar Sugest√µes (Caixa 3)", on_click=generate_suggestions)

# --- Bot√£o Etapa 4 (Tamb√©m usando Callback) ---
if st.session_state.get("caixa4"):
    st.button("üí≠ Enviar Chat (Caixa 4)", on_click=send_chat)

# --- Exibi√ß√£o do Resultado do Chat (Etapa 4) ---
if st.session_state.get("chat_response"):
    st.markdown("---")
    st.markdown(f"**Gemini:** {st.session_state['chat_response']}")
    st.markdown("---")
